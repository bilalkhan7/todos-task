{"ast":null,"code":"import { ComponentStore } from '@ngrx/component-store';\nimport { tapResponse } from '@ngrx/operators';\nimport { TodoApi } from './todo.api';\nimport { inject } from '@angular/core';\nimport { switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let TodoStore = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class TodoStore extends ComponentStore {\n    constructor() {\n      super({\n        items: [],\n        total: 0,\n        loading: false\n      });\n      this.api = inject(TodoApi);\n      this.items$ = this.select(s => s.items);\n      this.total$ = this.select(s => s.total);\n      this.loading$ = this.select(s => s.loading);\n      this.setLoading = this.updater((state, loading) => ({\n        ...state,\n        loading\n      }));\n      this.setItems = this.updater((state, items) => ({\n        ...state,\n        items\n      }));\n      this.setTotal = this.updater((state, total) => ({\n        ...state,\n        total\n      }));\n      this.load = this.effect(trigger$ => trigger$.pipe(tap(() => this.setLoading(true)), switchMap(() => this.api.list().pipe(tapResponse(res => {\n        this.setItems(res.items);\n        this.setTotal(res.total);\n        this.setLoading(false);\n      }, _ => this.setLoading(false))))));\n      this.add = this.effect(params$ => params$.pipe(withLatestFrom(this.items$), switchMap(([dto, items]) => {\n        const tempId = crypto.randomUUID();\n        const optimistic = {\n          id: tempId,\n          userId: 'me',\n          title: dto.title,\n          description: dto.description ?? null,\n          completed: false,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n        this.setItems([optimistic, ...items]);\n        this.setTotal(items.length + 1);\n        return this.api.create(dto).pipe(tapResponse(created => this.setItems([created, ...items]), _ => {\n          this.setItems(items);\n          this.setTotal(items.length);\n        }));\n      })));\n      this.toggle = this.effect(id$ => id$.pipe(withLatestFrom(this.items$), switchMap(([id, items]) => {\n        const before = items;\n        const mapped = before.map(t => t.id === id ? {\n          ...t,\n          completed: !t.completed,\n          updatedAt: new Date().toISOString()\n        } : t);\n        this.setItems(mapped);\n        const target = before.find(t => t.id === id);\n        const desired = !target?.completed;\n        return this.api.update(id, {\n          completed: desired\n        }).pipe(tapResponse(saved => this.setItems(mapped.map(t => t.id === id ? saved : t)), _ => this.setItems(before)));\n      })));\n      this.updateOne = this.effect(params$ => params$.pipe(withLatestFrom(this.items$), switchMap(([{\n        id,\n        patch\n      }, items]) => {\n        const before = items;\n        const mapped = before.map(t => t.id === id ? {\n          ...t,\n          ...patch,\n          updatedAt: new Date().toISOString()\n        } : t);\n        this.setItems(mapped);\n        return this.api.update(id, patch).pipe(tapResponse(saved => this.setItems(mapped.map(t => t.id === id ? saved : t)), _ => this.setItems(before)));\n      })));\n      this.remove = this.effect(id$ => id$.pipe(withLatestFrom(this.items$), switchMap(([id, items]) => {\n        const before = items;\n        const mapped = before.filter(t => t.id !== id);\n        this.setItems(mapped);\n        this.setTotal(mapped.length);\n        return this.api.delete(id).pipe(tapResponse(() => {}, _ => {\n          this.setItems(before);\n          this.setTotal(before.length);\n        }));\n      })));\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function TodoStore_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TodoStore)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TodoStore,\n      factory: TodoStore.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return TodoStore;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}