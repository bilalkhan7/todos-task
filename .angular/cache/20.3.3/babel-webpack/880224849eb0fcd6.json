{"ast":null,"code":"import _asyncToGenerator from \"D:/todos-task/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// apps/frontend/src/app/core/auth.service.ts\nimport { signal, computed, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.user = signal(null, ...(ngDevMode ? [{\n        debugName: \"user\"\n      }] : []));\n      this.isAuthenticated = computed(() => this.user() !== null, ...(ngDevMode ? [{\n        debugName: \"isAuthenticated\"\n      }] : []));\n    }\n    /** Ensure the backend sets/refreshes the XSRF-TOKEN cookie. Safe to call multiple times. */\n    ensureCsrfCookie() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield firstValueFrom(_this.http.get('/api/csrf', {\n            withCredentials: true\n          }));\n        } catch {\n          // ignore; cookie might already exist or backend temporarily unreachable\n        }\n      })();\n    }\n    /** If a session exists, load the current user. Sets null on 401/404. */\n    refreshSession() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const me = yield firstValueFrom(_this2.http.get('/api/auth/me', {\n            withCredentials: true\n          }));\n          _this2.user.set(me ?? null);\n        } catch {\n          _this2.user.set(null);\n        }\n      })();\n    }\n    /** Register user, then auto-login (backend register does not create a session). */\n    register(name, email, password) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        yield _this3.ensureCsrfCookie();\n        yield firstValueFrom(_this3.http.post('/api/auth/register', {\n          name,\n          email,\n          password\n        }, {\n          withCredentials: true\n        }));\n        // Important: create a session after registration\n        yield _this3.login(email, password);\n      })();\n    }\n    /** Login and refresh session state. */\n    login(email, password) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        yield _this4.ensureCsrfCookie();\n        yield firstValueFrom(_this4.http.post('/api/auth/login', {\n          email,\n          password\n        }, {\n          withCredentials: true\n        }));\n        yield _this4.refreshSession();\n      })();\n    }\n    /** Logout and clear local state. */\n    logout() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield firstValueFrom(_this5.http.post('/api/auth/logout', {}, {\n            withCredentials: true\n          }));\n        } finally {\n          _this5.user.set(null);\n        }\n      })();\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}