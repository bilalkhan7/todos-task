{"ast":null,"code":"import { ComponentStore } from '@ngrx/component-store';\nimport { tapResponse } from '@ngrx/operators';\nimport { switchMap, withLatestFrom, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./todo.api\";\nconst initialState = {\n  items: [],\n  total: 0,\n  loading: false,\n  error: null\n};\nexport let TodoStore = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class TodoStore extends ComponentStore {\n    reset() {\n      this.setState(initialState);\n    }\n    constructor(api) {\n      super(initialState);\n      this.api = api;\n      this.items$ = this.select(s => s.items);\n      this.total$ = this.select(s => s.total);\n      this.loading$ = this.select(s => s.loading);\n      this.error$ = this.select(s => s.error);\n      this.pending$ = this.select(s => s.items.filter(t => !t.completed));\n      this.completed$ = this.select(s => s.items.filter(t => t.completed));\n      this.pendingCount$ = this.select(this.pending$, p => p.length);\n      this.completedCount$ = this.select(this.completed$, c => c.length);\n      this.setItems = this.updater((state, items) => ({\n        ...state,\n        items\n      }));\n      this.setTotal = this.updater((state, total) => ({\n        ...state,\n        total\n      }));\n      this.setLoading = this.updater((state, loading) => ({\n        ...state,\n        loading\n      }));\n      this.setError = this.updater((state, error) => ({\n        ...state,\n        error\n      }));\n      this.load = this.effect(trigger$ => trigger$.pipe(tap(() => this.setLoading(true)), switchMap(() => this.api.list().pipe(tapResponse({\n        next: res => {\n          this.setItems(res.items);\n          this.setTotal(res.total);\n          this.setError(null);\n        },\n        error: () => {\n          this.setError('Failed to load todos');\n        },\n        // called on both success & error\n        finalize: () => {\n          this.setLoading(false);\n        }\n      })))));\n      this.create = this.effect(dto$ => dto$.pipe(withLatestFrom(this.items$), switchMap(([dto, items]) => this.api.create(dto).pipe(tapResponse({\n        next: created => {\n          this.setItems([created, ...items]);\n          this.setTotal(items.length + 1);\n          this.setError(null);\n        },\n        error: () => {\n          this.setError('Failed to create todo');\n        }\n      })))));\n      this.update = this.effect(params$ => params$.pipe(withLatestFrom(this.items$), switchMap(([{\n        id,\n        dto\n      }, before]) => {\n        const optimistic = before.map(t => t.id === id ? {\n          ...t,\n          ...dto\n        } : t);\n        this.setItems(optimistic);\n        return this.api.update(id, dto).pipe(tapResponse({\n          next: saved => {\n            this.setItems(optimistic.map(t => t.id === id ? saved : t));\n            this.setError(null);\n          },\n          error: () => {\n            this.setItems(before);\n            this.setError('Failed to update todo');\n          }\n        }));\n      })));\n      this.toggle = this.effect(id$ => id$.pipe(withLatestFrom(this.items$), switchMap(([id, before]) => {\n        const optimistic = before.map(t => t.id === id ? {\n          ...t,\n          completed: !t.completed\n        } : t);\n        this.setItems(optimistic);\n        const completed = optimistic.find(t => t.id === id)?.completed ?? false;\n        return this.api.update(id, {\n          completed\n        }).pipe(tapResponse({\n          next: saved => {\n            this.setItems(optimistic.map(t => t.id === id ? saved : t));\n            this.setError(null);\n          },\n          error: () => {\n            this.setItems(before);\n            this.setError('Failed to toggle todo');\n          }\n        }));\n      })));\n      this.remove = this.effect(id$ => id$.pipe(withLatestFrom(this.items$), switchMap(([id, before]) => {\n        const after = before.filter(t => t.id !== id);\n        this.setItems(after);\n        this.setTotal(after.length);\n        return this.api.delete(id).pipe(tapResponse({\n          next: () => {\n            this.setError(null);\n          },\n          error: () => {\n            this.setItems(before);\n            this.setTotal(before.length);\n            this.setError('Failed to delete todo');\n          }\n        }));\n      })));\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function TodoStore_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TodoStore)(i0.ɵɵinject(i1.TodoApi));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TodoStore,\n      factory: TodoStore.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return TodoStore;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}