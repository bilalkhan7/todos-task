{"ast":null,"code":"import _asyncToGenerator from \"D:/todos-task/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// apps/frontend/src/app/core/auth.service.ts\nimport { signal, computed, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      // Expose a signal so templates can call `auth.user()`\n      this.user = signal(null, ...(ngDevMode ? [{\n        debugName: \"user\"\n      }] : []));\n      // Handy computed flag\n      this.isAuthenticated = computed(() => this.user() !== null, ...(ngDevMode ? [{\n        debugName: \"isAuthenticated\"\n      }] : []));\n    }\n    /**\n     * Hit this once on app start to ensure the backend sets the XSRF cookie.\n     * Your backend should set `XSRF-TOKEN` on this GET.\n     */\n    ensureCsrfCookie() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this.http.get('/api/csrf', {\n            withCredentials: true\n          }).toPromise();\n        } catch {\n          // ignore; cookie might already exist or backend offline momentarily\n        }\n      })();\n    }\n    /**\n     * Refresh user from the server if a session exists.\n     */\n    refreshSession() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const me = yield _this2.http.get('/api/auth/me', {\n            withCredentials: true\n          }).toPromise();\n          _this2.user.set(me ?? null);\n        } catch {\n          _this2.user.set(null);\n        }\n      })();\n    }\n    /**\n     * Register a new user then load the session.\n     */\n    register(name, email, password) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        yield _this3.http.post('/api/auth/register', {\n          name,\n          email,\n          password\n        }, {\n          withCredentials: true\n        }).toPromise();\n        yield _this3.refreshSession();\n      })();\n    }\n    /**\n     * Log in then load the session.\n     */\n    login(email, password) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        yield _this4.http.post('/api/auth/login', {\n          email,\n          password\n        }, {\n          withCredentials: true\n        }).toPromise();\n        yield _this4.refreshSession();\n      })();\n    }\n    /**\n     * Log out and clear local session state.\n     */\n    logout() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this5.http.post('/api/auth/logout', {}, {\n            withCredentials: true\n          }).toPromise();\n        } finally {\n          _this5.user.set(null);\n        }\n      })();\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}